"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import sys
from libs.setting_utils import env_bool, env_comma_separated_list
import dj_database_url
import django_stubs_ext


# sbdchd/django-types: :doughnut: Type stubs for Django
# https://github.com/sbdchd/django-types
django_stubs_ext.monkeypatch()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
SECRET_KEY_FALLBACKS = env_comma_separated_list("SECRET_KEY_FALLBACKS")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool("DEBUG", False)
LOG_DETAIL = env_bool("LOG_DETAIL", DEBUG)

ALLOWED_HOSTS = env_comma_separated_list("ALLOWED_HOSTS")

SESSION_COOKIE_HTTPONLY = True


# 環境情報
ENVIRONMENT = os.getenv("ENVIRONMENT", "Local")


# HTTPS 設定
FORCE_HTTPS = env_bool("FORCE_HTTPS", ENVIRONMENT != "Local")
if FORCE_HTTPS:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True


# Application definition

INSTALLED_APPS = [
    "users",
    "core",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

TESTING = "test" in sys.argv
conn_max_age = int(os.environ.get("CONN_MAX_AGE", 600))
db_ssl_required = not DEBUG and env_bool("DB_SSL_REQUIRED", True)
if db_ssl_required is None:
    raise ValueError("DB_SSL_REQUIRED が設定されていません")
db_config = dj_database_url.config(
    conn_max_age=conn_max_age,
    ssl_require=db_ssl_required,
)
DATABASES = {"default": db_config}


# Email
# https://docs.djangoproject.com/en/4.1/topics/email/

if SENDGRID_API_KEY := os.getenv("SENDGRID_API_KEY"):
    # SendGrid を使用する
    # https://github.com/sklarsa/django-sendgrid-v5
    EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"
    SENDGRID_TRACK_CLICKS_HTML = env_bool("SENDGRID_TRACK_CLICKS_HTML", False)
    SENDGRID_TRACK_CLICKS_PLAIN = env_bool("SENDGRID_TRACK_CLICKS_PLAIN", False)
    SENDGRID_SANDBOX_MODE_IN_DEBUG = False
elif EMAIL_HOST := os.getenv("EMAIL_HOST"):
    # SMTP を使用する
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = EMAIL_HOST
    EMAIL_PORT = os.getenv("EMAIL_PORT", 587)
else:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

if _default_from_email := os.getenv("DEFAULT_FROM_EMAIL"):
    DEFAULT_FROM_EMAIL = _default_from_email


# Authentication
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth

AUTH_USER_MODEL = "users.User"

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "ja"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [BASE_DIR / "locale"]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# TEST SETTINGS

TEST_RUNNER = "config.testrunner.XMLTestRunner"
TEST_OUTPUT_DESCRIPTIONS = True


# LOGGING

# Support for X-Request-ID
# https://devcenter.heroku.com/ja/articles/http-request-id#usage-with-django

LOG_REQUEST_ID_HEADER = "HTTP_X_REQUEST_ID"
LOG_REQUESTS = True
GENERATE_REQUEST_ID_IF_NOT_IN_HEADER = True

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "request_id": {"()": "log_request_id.filters.RequestIDFilter"},
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] [{request_id}] {message}",
            "style": "{",
        },
        "standard": {
            "format": "%(levelname)-8s [%(asctime)s] [%(request_id)s] %(name)s:%(lineno)s %(funcName)s %(message)s",  # noqa: E501
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG" if LOG_DETAIL else "INFO",
            "class": "logging.StreamHandler",
            "formatter": "standard",
            "filters": ["request_id"],
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
            "filters": ["request_id"],
        },
    },
    "loggers": {
        "botocore": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "s3transfer": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "urllib3": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
        "rules": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "log_request_id.middleware": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG" if LOG_DETAIL else "INFO",
    },
}
